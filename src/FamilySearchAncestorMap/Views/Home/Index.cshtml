@model Microsoft.Extensions.Options.IOptions<FamilySearchAncestorMap.AppKeys>
@{
    ViewData["Title"] = "Ancestor Map Login";
}

<div id="loginSection">
    <div class="centerEverything">
        <h2>Ancestry Map Example</h2>
        <h4>Login Required</h4>
        <div>Please note that we do not collect your credentials and use <a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2">OAUTH2</a> which requies cookies.</div>
        <div>Please visit the developers guide <a href="https://familysearch.org/developers/docs/guides">here</a> for more info.</div>
        <br />
        <div class="flex-center">
            <button class="btn btn-default" id="login" onclick="login()">Sign In to FamilySearch</button>
        </div>
        <br />
        <h6>Created by Dan Woodruff.</h6>
        <h6>Source code can be found <a href="https://github.com/wooddani/familysearch-ancestor-map">here</a>.</h6>
    </div>
</div>
<div id="appSection" class="flex-container">
    <div class="flex-20">
        <div class="search">
            <div class="flex-columns">
                <h4 class="flex-item">Search for a person:</h4>
                <div class="flex-item">Surname:<input id="surname" type="text" /></div>
                <div class="flex-item">Given Name:<input id="givenName" type="text" /></div>
                <div class="flex-item flex-right">
                    <button class="btn btn-default" id="search" onclick="onSearch()">Search</button>
                </div>
            </div>
        </div>
        <div class="results" style="display:none;">
            <ul id="searchResults"></ul>
        </div>
    </div>
    <div class="flex-80" id="worldmap">
    </div>
</div>

@section scripts
{
    @*
        // Two Parts:
        // 1. First is authentication by using the javascript lite SDK to get an OAUTH2 token
        // 2. Second is render the map
    *@

    <script src="https://unpkg.com/fs-js-lite@latest/dist/FamilySearch.min.js"></script>
    <script>

        // refer to https://github.com/FamilySearch/fs-js-lite
        var fs = new FamilySearch({
            environment: '@Model.Value.Environment.ToString().ToLower()',
            appKey: '@Model.Value.FSKey',
            redirectUri: '@Model.Value.Url',
            saveAccessToken: true,
            tokenCookie: 'FS_AUTH_TOKEN'
        });

        if (typeof Cookies.get('FS_AUTH_TOKEN') === 'undefined') {
            drawPage(false);

            // no cookie
            fs.oauthResponse(function () {
                console.log('cookie has been set!');
                drawPage(true);
            });

        } else {
            //have cookie
            drawPage(true);
        }

        function login() {
            fs.oauthRedirect();
        }

        function drawPage(showapp) {
            if (showapp) {
                $('#loginSection').hide();
                $('#appSection').show();
            }
            else {
                $('#loginSection').show();
                $('#appSection').hide();
            }
        }
    </script>

    @*
        Render map portion.
    *@

    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script src="~/js/d3.geo.tile.min.js"></script>
    <script>
        
        function onSearch() {
            $(".results").hide();
            $("#searchResults").html('');
            document.body.style.cursor = 'wait';

            var surname = $('#surname').val();
            $('#surname').empty();
            var givenName = $('#givenName').val();
            $('#givenName').empty();
            $.get("api/familysearch/search?surname=" + encodeURI(surname) + "&givenName=" + encodeURI(givenName))
            .done(function (persons) {
                $(".results").show();
                $("#searchResults").empty();
                for (var i = 0; i < persons.length; i++) {
                    $("#searchResults").append('<li><div class="clickable hoverme" onclick="ancestry(\'' +
                        persons[i].id + '\')"><div class="person-name">' +
                        persons[i].name + '<span class="person-key">  (' + persons[i].id + ')</span></div><div class="person-detail">Birth: ' +
                        persons[i].birth + '</div><div class="person-detail">Death: ' +
                        persons[i].death + '</div></div></li>');
                }
            }).always(function () {
                document.body.style.cursor = 'default';
            });
        }

        console.log($("#worldmap").width());
        var width = 1400; // Math.max(960, window.innerWidth), // Full screen optional
        var height = 900; // Math.max(500, window.innerHeight),
        var prefix = prefixMatch(["webkit", "ms", "Moz", "O"]);

        var tile = d3.geo.tile()
            .size([width, height]);

        var projection = d3.geo.mercator();

        var zoom = d3.behavior.zoom()
            .scale(1490) // initial zooming depth
            .scaleExtent([1 << 9, 1 << 23]) // 512, 8388608 // Range allowed to zoom around in
            .translate([width / 2, height / 2]) // Starting zoom location, lat 0,  long 0
            .on("zoom", zoomed);

        var map = d3.select("#worldmap").append("div")
            .attr("class", "map")
            .style("width", width + "px")
            .style("height", height + "px")
            .call(zoom)
            .on("mousemove", mousemoved);

        var layer = map.append("div")
            .attr("class", "layer");

        var info = map.append("div")
            .attr("class", "info");

        var tip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);

        var fill = "rgba(255, 49, 255, 0.388)";
        var stroke = "rgba(0, 0, 0, 0.63)";
        var strokeWidth = 0.01;
        var radius = 8;
        var svg = map.append("svg")
            .attr("width", width)
            .attr("height", height)
            .attr("class", "svg-overlay");

        var places = []; // array holding locations to draw circle on.

        zoomed();

        function zoomed() {
            var tiles = tile
                .scale(zoom.scale())
                .translate(zoom.translate())
                ();

            projection
                .scale(zoom.scale() / 2 / Math.PI)
                .translate(zoom.translate());

            var image = layer
                .style(prefix + "transform", matrix3d(tiles.scale, tiles.translate))
               .selectAll(".tile")
                .data(tiles, function (d) { return d; });

            image.exit()
                .remove();

            image.enter().append("img")
                .attr("class", "tile")
                .attr("src", function (d) { return "http://" + ["a", "b", "c"][Math.random() * 3 | 0] + ".tile.openstreetmap.org/" + d[2] + "/" + d[0] + "/" + d[1] + ".png"; })
                .style("left", function (d) { return (d[0] << 8) + "px"; })
                .style("top", function (d) { return (d[1] << 8) + "px"; });

            drawLocations();

        }

        function drawLocations() {

            var oldcircles = svg.selectAll("circle");
            oldcircles.remove();

            var g = svg.append("g");

            // Example of putting a "pin" on Upstate New York.
            //g.append("circle")
            //    .attr("class", "ancestor-birth")
            //    .attr("fill", fill)
            //    .attr("stroke", stroke)
            //    .attr("stroke-width", strokeWidth)
            //    .attr("r", radius)
            //    .attr("transform", function () { return "translate(" + projection([-75, 43]) + ")"; });

            g.selectAll(".pin")
                .data(places)
                .enter()
                .append("circle", ".pin")
                    .attr("fill", fill)
                    .attr("stroke", stroke)
                    .attr("stroke-width", strokeWidth)
                    .attr("r", radius)
                    .attr("transform", function (d) {
                        return "translate(" + projection([
                            d.location.longitude,
                            d.location.latitude
                        ]) + ")";
                    })
                    .on("mouseover", function (d) {
                        tip.transition()
                            .duration(200)
                            .style("opacity", .9);
                        tip.html(d.name + "<br/>")
                            .style("left", (d3.event.pageX) + "px")
                            .style("top", (d3.event.pageY - 28) + "px");
                    })
                    .on("mouseout", function (d) {
                        tip.transition()
                            .duration(500)
                            .style("opacity", 0);
                    });
            ;
        }

        function mousemoved() {
            info.text(formatLocation(projection.invert(d3.mouse(this)), zoom.scale()));
        }

        function matrix3d(scale, translate) {
            var k = scale / 256, r = scale % 1 ? Number : Math.round;
            return "matrix3d(" + [k, 0, 0, 0, 0, k, 0, 0, 0, 0, k, 0, r(translate[0] * scale), r(translate[1] * scale), 0, 1] + ")";
        }

        function prefixMatch(p) {
            var i = -1, n = p.length, s = document.body.style;
            while (++i < n) if (p[i] + "Transform" in s) return "-" + p[i].toLowerCase() + "-";
            return "";
        }

        function formatLocation(p, k) {
            var format = d3.format("." + Math.floor(Math.log(k) / 2 - 2) + "f");
            return (p[1] < 0 ? format(-p[1]) + "°S" : format(p[1]) + "°N") + " "
                 + (p[0] < 0 ? format(-p[0]) + "°W" : format(p[0]) + "°E") + " Scale: " + k;
        }

        // when they need some pins, draw them.
        function ancestry(personId) {
            document.body.style.cursor = 'wait';
            if (personId) {
                places = []; // clear things

                $.get("api/familysearch/ancestry/" + personId)
                .done(function (response) {

                    for (var i = 0; i < response.places.length; i++) {
                        if (response.places[i] && response.places[i].location) {
                            places.push({
                                name: response.places[i].name,
                                location: {
                                    latitude: response.places[i].location.latitude,
                                    longitude: response.places[i].location.longitude
                                }
                            });
                        }
                    }

                    zoomed();
                    alert("Zoom out")
                })
                .fail(function (error) {
                    alert("An error occured. Please try another.");
                    console.log(error)
                })
                .always(function () {
                    document.body.style.cursor = 'default';
                });
            }
        }

    </script>

}